// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package config

import (
	"bbb-voting-service/internal/application/usecases/cache"
	"bbb-voting-service/internal/application/usecases/captcha"
	"bbb-voting-service/internal/application/usecases/participants"
	"bbb-voting-service/internal/application/usecases/results"
	"bbb-voting-service/internal/application/usecases/votes"
	producer2 "bbb-voting-service/internal/domain/producer"
	repositories3 "bbb-voting-service/internal/domain/repositories"
	"bbb-voting-service/internal/infrastructure/consumer"
	"bbb-voting-service/internal/infrastructure/controllers"
	"bbb-voting-service/internal/infrastructure/jobs"
	"bbb-voting-service/internal/infrastructure/producer"
	"bbb-voting-service/internal/infrastructure/repositories/postgres"
	repositories2 "bbb-voting-service/internal/infrastructure/repositories/redis"
	"bbb-voting-service/internal/infrastructure/services"
	"os"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitializeContainer() (*Container, error) {
	db := InitDB()
	client := InitRedis()
	channel := InitRabbitMQ()
	participantRepository := repositories.NewParticipantRepository(db)
	postgresVoteRepository := repositories.NewPostgresVoteRepository(db)
	redisRepository := repositories2.NewRedisRepository(client)
	rabbitMQProducer := producer.NewRabbitMQProducer(channel)
	processVoteUsecase := votes.NewProcessVoteUsecase(postgresVoteRepository, participantRepository)
	rabbitMQConsumer := consumer.NewRabbitMQConsumer(channel, processVoteUsecase)
	getFinalResultsUsecase := results.NewGetFinalResultsUseCase(postgresVoteRepository, participantRepository)
	syncCacheUsecase := InitSyncCacheUsecase(getFinalResultsUsecase, redisRepository)
	syncCacheJob := jobs.NewSyncCacheJob(syncCacheUsecase)
	cron := InitCron(syncCacheJob)
	captchaService := services.NewCaptchaService(client)
	generateCaptchaUsecase := captcha.NewGenerateCaptchaUsecase(captchaService)
	serveCaptchaUsecase := captcha.NewServeCaptchaUsecase(captchaService)
	validateCaptchaUsecase := captcha.NewValidateCaptchaUsecase(captchaService)
	validateCaptchaTokenUsecase := captcha.NewValidateCaptchaTokenUsecase(captchaService)
	createParticipantUsecase := participants.NewCreateParticipantUsecase(participantRepository)
	getParticipantsUsecase := participants.NewGetParticipantsUsecase(participantRepository)
	deleteParticipantUsecase := participants.NewDeleteParticipantUsecase(participantRepository)
	getParticipantUsecase := participants.NewGetParticipantUsecase(participantRepository)
	castVoteUsecase := InitCastVoteUsecase(redisRepository, rabbitMQProducer, participantRepository)
	getPartialResultsUsecase := results.NewGetPartialResultsUsecase(redisRepository)
	captchaController := controllers.NewCaptchaController(generateCaptchaUsecase, validateCaptchaUsecase, validateCaptchaTokenUsecase, serveCaptchaUsecase)
	participantController := controllers.NewParticipantController(getParticipantsUsecase, getParticipantUsecase, createParticipantUsecase, deleteParticipantUsecase)
	voteController := controllers.NewVoteController(castVoteUsecase, captchaService)
	resultController := controllers.NewResultController(getPartialResultsUsecase, getFinalResultsUsecase)
	container := &Container{
		DB:                          db,
		RedisClient:                 client,
		RabbitMQChannel:             channel,
		ParticipantRepository:       participantRepository,
		VoteRepository:              postgresVoteRepository,
		RedisRepository:             redisRepository,
		RabbitMQProducer:            rabbitMQProducer,
		RabbitMQConsumer:            rabbitMQConsumer,
		SyncCacheJob:                syncCacheJob,
		Cron:                        cron,
		GenerateCaptchaUsecase:      generateCaptchaUsecase,
		ServeCaptchaUsecase:         serveCaptchaUsecase,
		ValidateCaptchaUsecase:      validateCaptchaUsecase,
		ValidateCaptchaTokenUsecase: validateCaptchaTokenUsecase,
		CreateParticipantUsecase:    createParticipantUsecase,
		GetParticipantsUsecase:      getParticipantsUsecase,
		DeleteParticipantUsecase:    deleteParticipantUsecase,
		GetParticipantUsecase:       getParticipantUsecase,
		CastVoteUsecase:             castVoteUsecase,
		ProcessVoteUsecase:          processVoteUsecase,
		GetPartialResultsUsecase:    getPartialResultsUsecase,
		GetFinalResultsUseCase:      getFinalResultsUsecase,
		CaptchaService:              captchaService,
		CaptchaController:           captchaController,
		ParticipantController:       participantController,
		VoteController:              voteController,
		ResultController:            resultController,
	}
	return container, nil
}

// wire.go:

func InitCastVoteUsecase(
	inMemoryRepository repositories3.InMemoryRepository,
	domainProducer producer2.MessageProducer,
	participantRepository repositories3.ParticipantRepository,
) *votes.CastVoteUsecase {
	voteQueue := os.Getenv("VOTE_QUEUE")

	return votes.NewCastVoteUsecase(inMemoryRepository, domainProducer, participantRepository, voteQueue)
}

func InitGetFinalResultsUsecase(
	voteRepository repositories3.VoteRepository,
	participantRepository repositories3.ParticipantRepository,
) *results.GetFinalResultsUsecase {
	return results.NewGetFinalResultsUseCase(voteRepository, participantRepository)
}

func InitSyncCacheUsecase(
	getFinalResultsUsecase *results.GetFinalResultsUsecase,
	inMemoryRepository repositories3.InMemoryRepository,
) *cache.SyncCacheUsecase {
	return cache.NewSyncCacheUsecase(getFinalResultsUsecase, inMemoryRepository)
}
